{"version":3,"file":"bitset.test.cjs","sources":["../../../../src/libs/bitset/bitset.test.ts"],"sourcesContent":["import { relative, resolve } from \"node:path\";\nimport { test } from \"uvu\";\nimport * as assert from \"uvu/assert\";\nimport { Bitset } from \"./bitset.js\";\n\ntest.before(async () => {\n  const directory = resolve(\"./dist/test/\")\n  const { pathname } = new URL(import.meta.url)\n  console.log(relative(directory, pathname))\n})\n\nfunction format(bitmask: Bitset, digits: number) {\n  let s = bitmask.unsigned().toString(2)\n  while (s.length < digits) s = \"0\" + s\n  return s\n}\n\ntest(\"Identity\", async () => {\n  const bitmask = new Bitset(0b00000000, 8)\n\n  assert.is(bitmask.get(1), false)\n  assert.is(format(bitmask, 8), \"00000000\")\n})\n\ntest(\"Enable then disable\", async () => {\n  const bitmask = new Bitset(0b00000000, 8)\n\n  bitmask.enable(1)\n  assert.is(bitmask.get(1), true)\n  assert.is(format(bitmask, 8), \"00000010\")\n\n  bitmask.disable(1)\n  assert.is(bitmask.get(1), false)\n  assert.is(format(bitmask, 8), \"00000000\")\n})\n\ntest(\"Toggle then toggle\", async () => {\n  const bitmask = new Bitset(0b00000000, 8)\n\n  bitmask.toggle(1)\n  assert.is(bitmask.get(1), true)\n  assert.is(format(bitmask, 8), \"00000010\")\n\n  bitmask.toggle(1)\n  assert.is(bitmask.get(1), false)\n  assert.is(format(bitmask, 8), \"00000000\")\n})\n\ntest(\"Export Int32 to Uint32\", async () => {\n  const bitmask = new Bitset(Date.now(), 32)\n\n  const n0 = bitmask.value\n  const e0 = bitmask.unsigned()\n\n  bitmask.toggle(32)\n\n  const n1 = bitmask.value\n  const e1 = bitmask.unsigned()\n\n  assert.ok(n0 > 0)\n  assert.ok(n1 < 0)\n\n  assert.ok(e0 > 0)\n  assert.ok(e1 > 0)\n\n  const buffer = Buffer.from([0, 0, 0, 0])\n  assert.throws(() => buffer.writeUInt32BE(bitmask.value, 0))\n  assert.not.throws(() => buffer.writeUInt32BE(bitmask.unsigned(), 0))\n})\n\ntest(\"First\", async () => {\n  const bitmask = new Bitset(0b11100011, 8)\n\n  assert.is(bitmask.first(2), 3)\n  assert.is(bitmask.first(3), 7)\n})\n\ntest(\"Last\", async () => {\n  const bitmask = new Bitset(0b11100111, 8)\n\n  assert.is(bitmask.last(2), 3)\n  assert.is(bitmask.last(3), 7)\n})\n\ntest.run()"],"names":["test","__awaiter","resolve","relative","Bitset","assert"],"mappings":"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"}
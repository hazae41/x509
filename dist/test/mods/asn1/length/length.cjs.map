{"version":3,"file":"length.cjs","sources":["../../../../../src/mods/asn1/length/length.ts"],"sourcesContent":["import { Binary } from \"libs/binary/binary.js\";\nimport { Bitset } from \"libs/bitset/bitset.js\";\n\nexport class Length {\n  readonly class = Length\n\n  constructor(\n    readonly value: number\n  ) { }\n\n  static read(binary: Binary) {\n    const first = binary.readUint8()\n    if (first < 128) return new this(first)\n\n    const count = new Bitset(first, 8)\n      .disable(7)\n      .value\n\n    let value = 0\n\n    for (let i = 0; i < count; i++)\n      value += binary.readUint8() * (256 ** (count - i - 1))\n\n    return new this(value)\n  }\n}"],"names":["Bitset"],"mappings":";;;;MAGa,MAAM,CAAA;AAGjB,IAAA,WAAA,CACW,KAAa,EAAA;QAAb,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;QAHf,IAAK,CAAA,KAAA,GAAG,MAAM,CAAA;KAIlB;IAEL,OAAO,IAAI,CAAC,MAAc,EAAA;AACxB,QAAA,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,EAAE,CAAA;QAChC,IAAI,KAAK,GAAG,GAAG;AAAE,YAAA,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA;QAEvC,MAAM,KAAK,GAAG,IAAIA,aAAM,CAAC,KAAK,EAAE,CAAC,CAAC;aAC/B,OAAO,CAAC,CAAC,CAAC;AACV,aAAA,KAAK,CAAA;QAER,IAAI,KAAK,GAAG,CAAC,CAAA;QAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE;AAC5B,YAAA,KAAK,IAAI,MAAM,CAAC,SAAS,EAAE,IAAI,GAAG,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;AAExD,QAAA,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA;KACvB;AACF;;;;"}
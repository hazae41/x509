{"version":3,"file":"integer.cjs","sources":["../../../../../src/mods/asn1/integer/integer.ts"],"sourcesContent":["import { Binary } from \"libs/binary/binary.js\"\nimport { Length } from \"mods/asn1/length/length.js\"\nimport { Type } from \"mods/asn1/type/type.js\"\n\nexport class Integer {\n  readonly class = Integer\n\n  static type = new Type(Type.clazzes.universal, false, Type.tags.integer)\n\n  constructor(\n    readonly value: number\n  ) { }\n\n  static read(binary: Binary) {\n    const type = Type.read(binary)\n\n    if (!this.type.equals(type))\n      throw new Error(`Invalid type`)\n\n    const length = Length.read(binary)\n\n    let value = 0\n\n    for (let i = 0; i < length.value; i++)\n      value += binary.readUint8() * Math.pow(256, length.value - i - 1)\n\n    return new this(value)\n  }\n}"],"names":["type","Type","length","Length"],"mappings":";;;;;MAIa,OAAO,CAAA;AAKlB,IAAA,WAAA,CACW,KAAa,EAAA;QAAb,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;QALf,IAAK,CAAA,KAAA,GAAG,OAAO,CAAA;KAMnB;IAEL,OAAO,IAAI,CAAC,MAAc,EAAA;QACxB,MAAMA,MAAI,GAAGC,SAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAE9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAACD,MAAI,CAAC;AACzB,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,YAAA,CAAc,CAAC,CAAA;QAEjC,MAAME,QAAM,GAAGC,aAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAElC,IAAI,KAAK,GAAG,CAAC,CAAA;AAEb,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAGD,QAAM,CAAC,KAAK,EAAE,CAAC,EAAE;YACnC,KAAK,IAAI,MAAM,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAEA,QAAM,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;AAEnE,QAAA,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA;KACvB;;AApBM,OAAA,CAAA,IAAI,GAAG,IAAID,SAAI,CAACA,SAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,EAAEA,SAAI,CAAC,IAAI,CAAC,OAAO,CAAC;;;;"}
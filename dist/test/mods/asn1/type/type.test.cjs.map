{"version":3,"file":"type.test.cjs","sources":["../../../../../src/mods/asn1/type/type.test.ts"],"sourcesContent":["import { assert } from \"libs/assert/assert.js\";\nimport { Binary } from \"libs/binary/binary.js\";\nimport { Type } from \"mods/asn1/type/type.js\";\nimport { Certificate } from \"mods/x509/certificate/certificate.js\";\nimport { relative, resolve } from \"node:path\";\nimport { test } from \"uvu\";\n\ntest.before(async () => {\n  const directory = resolve(\"./dist/test/\")\n  const { pathname } = new URL(import.meta.url)\n  console.log(relative(directory, pathname.replace(\".cjs\", \".ts\")))\n})\n\nfunction hexToType(hex: string) {\n  const buffer = Buffer.from(hex.replaceAll(\" \", \"\"), \"hex\")\n  return Type.fromDER(new Binary(buffer))\n}\n\ntest(\"Read\", async () => {\n  assert(hexToType(\"30\").equals(Certificate.type))\n})\n\ntest.run()"],"names":["test","__awaiter","resolve","relative","Type","Binary","assert","Certificate"],"mappings":";;;;;;;;;;AAOAA,QAAI,CAAC,MAAM,CAAC,MAAWC,eAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACrB,IAAA,MAAM,SAAS,GAAGC,iBAAO,CAAC,cAAc,CAAC,CAAA;AACzC,IAAA,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,GAAG,CAAC,uNAAe,CAAC,CAAA;AAC7C,IAAA,OAAO,CAAC,GAAG,CAACC,kBAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAA;AACnE,CAAC,CAAA,CAAC,CAAA;AAEF,SAAS,SAAS,CAAC,GAAW,EAAA;AAC5B,IAAA,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAA;IAC1D,OAAOC,SAAI,CAAC,OAAO,CAAC,IAAIC,aAAM,CAAC,MAAM,CAAC,CAAC,CAAA;AACzC,CAAC;AAEDL,QAAI,CAAC,MAAM,EAAE,MAAWC,eAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACtB,IAAAK,aAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAACC,uBAAW,CAAC,IAAI,CAAC,CAAC,CAAA;AAClD,CAAC,CAAA,CAAC,CAAA;AAEFP,QAAI,CAAC,GAAG,EAAE;;"}
{"version":3,"file":"tbscertificate.cjs","sources":["../../../../src/mods/certificate/tbscertificate.ts"],"sourcesContent":["import { Binary } from \"libs/binary/binary.js\";\nimport { Integer } from \"mods/asn1/integer/integer.js\";\nimport { Length } from \"mods/asn1/length/length.js\";\nimport { Type } from \"mods/asn1/type/type.js\";\n\nexport class TBSCertificate {\n  readonly class = TBSCertificate\n\n  static type = new Type(Type.clazzes.universal, true, Type.tags.sequence)\n\n  constructor(\n    readonly version: number\n  ) { }\n\n  static read(binary: Binary) {\n    const type = Type.read(binary)\n\n    if (!this.type.equals(type))\n      throw new Error(`Invalid type`)\n\n    const length = Length.read(binary)\n\n\n  }\n}\n\nclass TBSCertificateVersion {\n  readonly class = TBSCertificateVersion\n\n  static type = new Type(Type.clazzes.context, true, 0)\n\n  constructor(\n    readonly inner = new Integer(1)\n  ) { }\n\n  static read(binary: Binary) {\n    const start = binary.offset\n\n    const type = Type.read(binary)\n\n    if (!this.type.equals(type)) {\n      binary.offset = start\n      return new this()\n    }\n\n    const length = Length.read(binary)\n  }\n}\n"],"names":["type","Type","Length"],"mappings":";;;;;;MAKa,cAAc,CAAA;AAKzB,IAAA,WAAA,CACW,OAAe,EAAA;QAAf,IAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;QALjB,IAAK,CAAA,KAAA,GAAG,cAAc,CAAA;KAM1B;IAEL,OAAO,IAAI,CAAC,MAAc,EAAA;QACxB,MAAMA,MAAI,GAAGC,SAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAE9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAACD,MAAI,CAAC;AACzB,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,YAAA,CAAc,CAAC,CAAA;QAElBE,aAAM,CAAC,IAAI,CAAC,MAAM,EAAC;KAGnC;;AAfM,cAAA,CAAA,IAAI,GAAG,IAAID,SAAI,CAACA,SAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAEA,SAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAqB1D,IAAIA,SAAI,CAACA,SAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;;;;"}
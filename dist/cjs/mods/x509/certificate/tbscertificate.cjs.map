{"version":3,"file":"tbscertificate.cjs","sources":["../../../../../src/mods/x509/certificate/tbscertificate.ts"],"sourcesContent":["import { Binary } from \"libs/binary/binary.js\";\nimport { Integer } from \"mods/asn1/integer/integer.js\";\nimport { Length } from \"mods/asn1/length/length.js\";\nimport { Type } from \"mods/asn1/type/type.js\";\nimport { AlgorithmIdentifier } from \"mods/x509/algorithm/algorithm.js\";\n\nexport class TBSCertificate {\n  readonly class = TBSCertificate\n\n  static type = new Type(Type.clazzes.universal, true, Type.tags.SEQUENCE)\n\n  constructor(\n    readonly version: TBSCertificateVersion,\n    readonly serialNumber: Integer,\n    readonly algorithm: AlgorithmIdentifier\n  ) { }\n\n  static read(binary: Binary) {\n    const type = Type.fromDER(binary)\n\n    if (!this.type.equals(type))\n      throw new Error(`Invalid type`)\n\n    const length = Length.fromDER(binary)\n    const content = binary.offset\n\n    const version = TBSCertificateVersion.read(binary)\n    const serialNumber = Integer.fromDER(binary)\n    const algorithm = AlgorithmIdentifier.read(binary)\n\n    return new this(version, serialNumber, algorithm)\n  }\n}\n\nclass TBSCertificateVersion {\n  readonly class = TBSCertificateVersion\n\n  static type = new Type(Type.clazzes.context, true, 0)\n\n  constructor(\n    readonly inner = new Integer(BigInt(1))\n  ) { }\n\n  static read(binary: Binary) {\n    const start = binary.offset\n\n    const type = Type.fromDER(binary)\n\n    if (!this.type.equals(type)) {\n      binary.offset = start\n      return new this()\n    }\n\n    const length = Length.fromDER(binary)\n    const content = binary.offset\n\n    const inner = Integer.fromDER(binary)\n\n    if (binary.offset - content !== length.value)\n      throw new Error(`Invalid length`)\n\n    return new this(inner)\n  }\n}\n"],"names":["type","Type","Length","Integer","algorithm","AlgorithmIdentifier","length"],"mappings":";;;;;;;MAMa,cAAc,CAAA;AAKzB,IAAA,WAAA,CACW,OAA8B,EAC9B,YAAqB,EACrB,SAA8B,EAAA;QAF9B,IAAO,CAAA,OAAA,GAAP,OAAO,CAAuB;QAC9B,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAS;QACrB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAqB;QAPhC,IAAK,CAAA,KAAA,GAAG,cAAc,CAAA;KAQ1B;IAEL,OAAO,IAAI,CAAC,MAAc,EAAA;QACxB,MAAMA,MAAI,GAAGC,SAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAEjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAACD,MAAI,CAAC;AACzB,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,YAAA,CAAc,CAAC,CAAA;QAElBE,aAAM,CAAC,OAAO,CAAC,MAAM,EAAC;AACrC,QAAgB,MAAM,CAAC,OAAM;QAE7B,MAAM,OAAO,GAAG,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAClD,MAAM,YAAY,GAAGC,eAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC5C,MAAMC,WAAS,GAAGC,6BAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAElD,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE,YAAY,EAAED,WAAS,CAAC,CAAA;KAClD;;AAtBM,cAAA,CAAA,IAAI,GAAG,IAAIH,SAAI,CAACA,SAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAEA,SAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAyB1E,MAAM,qBAAqB,CAAA;IAKzB,WACW,CAAA,KAAA,GAAQ,IAAIE,eAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAA;QAA9B,IAAK,CAAA,KAAA,GAAL,KAAK,CAAyB;QALhC,IAAK,CAAA,KAAA,GAAG,qBAAqB,CAAA;KAMjC;IAEL,OAAO,IAAI,CAAC,MAAc,EAAA;AACxB,QAAA,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAA;QAE3B,MAAMH,MAAI,GAAGC,SAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAEjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAACD,MAAI,CAAC,EAAE;AAC3B,YAAA,MAAM,CAAC,MAAM,GAAG,KAAK,CAAA;YACrB,OAAO,IAAI,IAAI,EAAE,CAAA;AAClB,SAAA;QAED,MAAMM,QAAM,GAAGJ,aAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;AACrC,QAAA,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAA;QAE7B,MAAM,KAAK,GAAGC,eAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAErC,IAAI,MAAM,CAAC,MAAM,GAAG,OAAO,KAAKG,QAAM,CAAC,KAAK;AAC1C,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,cAAA,CAAgB,CAAC,CAAA;AAEnC,QAAA,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA;KACvB;;AAzBM,qBAAA,CAAA,IAAI,GAAG,IAAIL,SAAI,CAACA,SAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;;;;"}
{"version":3,"file":"certificate.cjs","sources":["../../../../../src/mods/x509/certificate/certificate.ts"],"sourcesContent":["import { Binary } from \"libs/binary/binary.js\";\nimport { Length } from \"mods/asn1/length/length.js\";\nimport { Type } from \"mods/asn1/type/type.js\";\nimport { TBSCertificate } from \"mods/x509/certificate/tbscertificate.js\";\n\nexport class Certificate {\n  readonly class = Certificate\n\n  static type = new Type(Type.clazzes.UNIVERSAL, true, Type.tags.SEQUENCE)\n\n  constructor(\n    readonly tbsCertificate: TBSCertificate,\n    // readonly algorithmIdentifier: AlgorithmIdentifier,\n    // readonly signatureValue: Buffer0\n  ) { }\n\n  static read(binary: Binary) {\n    const type = Type.fromDER(binary)\n\n    if (!this.type.equals(type))\n      throw new Error(`Invalid type`)\n\n    const length = Length.fromDER(binary)\n\n    const tbscert = TBSCertificate.read(binary)\n\n    return new this(tbscert)\n  }\n}"],"names":["type","Type","Length","TBSCertificate"],"mappings":";;;;;;MAKa,WAAW,CAAA;AAKtB,IAAA,WAAA,CACW,cAA8B,EAAA;QAA9B,IAAc,CAAA,cAAA,GAAd,cAAc,CAAgB;QALhC,IAAK,CAAA,KAAA,GAAG,WAAW,CAAA;KAQvB;IAEL,OAAO,IAAI,CAAC,MAAc,EAAA;QACxB,MAAMA,MAAI,GAAGC,SAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAEjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAACD,MAAI,CAAC;AACzB,YAAA,MAAM,IAAI,KAAK,CAAC,CAAA,YAAA,CAAc,CAAC,CAAA;QAElBE,aAAM,CAAC,OAAO,CAAC,MAAM,EAAC;QAErC,MAAM,OAAO,GAAGC,6BAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAE3C,QAAA,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAA;KACzB;;AAnBM,WAAA,CAAA,IAAI,GAAG,IAAIF,SAAI,CAACA,SAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAEA,SAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;;;;"}